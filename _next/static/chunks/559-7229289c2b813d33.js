"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[559],{3559:function(e,t,n){n.d(t,{Z:function(){return eL}});var r,o,i,a,s,c,l,d,p,g,u,h,m,w,f=n(9499),b=n(4660),y=n(4730),v=n(9008),x=n.n(v),_=n(2204),k=n(6011),A=n(2262),Z=n(1664),O=n.n(Z),I=n(3822),S=n(118),E=n(5944),j={name:"shnxmo",styles:"margin-top:-4.5rem;background-size:cover;background-repeat:no-repeat;padding-top:6rem;background-position-y:bottom;margin-left:-1px"},T={name:"12sg8mh",styles:"display:flex;flex-direction:column;padding-bottom:2.5rem;text-align:center;font-size:1.125rem;line-height:1.75rem"},L={name:"1thtyh3",styles:"margin-top:2.5rem;display:flex;min-width:0px;flex:1 1 0%;flex-direction:column;gap:0.5rem;padding-left:1.25rem;padding-right:1.25rem;padding-bottom:0.75rem"},B={name:"6phnuv",styles:"display:flex;flex-direction:row;align-items:center;justify-content:center;gap:1rem;white-space:pre-wrap;line-height:1.375"},P={name:"796osz",styles:"font-size:3rem;line-height:1;font-weight:500"},C={name:"7c0oq",styles:"display:inline-flex;align-items:center;gap:0.5rem;border-radius:0.5rem;--tw-bg-opacity:1;background-color:rgb(31 41 55 / var(--tw-bg-opacity));padding-left:1rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-size:2.25rem;line-height:2.5rem;--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity));transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:300ms;:hover{--tw-bg-opacity:1;background-color:rgb(55 65 81 / var(--tw-bg-opacity));}"},R={name:"cfjpzu",styles:"margin:0px"},z={name:"1xysqfp",styles:"margin:0px;margin-top:0.5rem"},D={name:"yhzugg",styles:"--tw-text-opacity:1;color:rgb(251 146 60 / var(--tw-text-opacity))"},X={name:"1psf41e",styles:"--tw-text-opacity:1;color:rgb(251 113 133 / var(--tw-text-opacity))"},M={name:"339611",styles:"--tw-text-opacity:1;color:rgb(74 222 128 / var(--tw-text-opacity))"},G={name:"1xysqfp",styles:"margin:0px;margin-top:0.5rem"},N={name:"yhzugg",styles:"--tw-text-opacity:1;color:rgb(251 146 60 / var(--tw-text-opacity))"},q={name:"1psf41e",styles:"--tw-text-opacity:1;color:rgb(251 113 133 / var(--tw-text-opacity))"},F={name:"339611",styles:"--tw-text-opacity:1;color:rgb(74 222 128 / var(--tw-text-opacity))"};function W(e){e.docOrigin,e.appOrigin;var t=e.locale,n=(0,S.Z)();return(0,E.tZ)("section",{css:j,children:(0,E.tZ)(I.Z,{css:T,children:(0,E.BX)("div",{css:L,children:[(0,E.BX)("div",{css:B,children:[(0,E.tZ)("h2",{css:P,children:n(r||(r=(0,b.Z)(["banner.title"])))}),(0,E.BX)(O(),{href:"https://github.com/PromptAI/PromptAI",target:"_blank",css:C,children:[(0,E.tZ)("i",{className:"fab fa-github"}),(0,E.tZ)("span",{children:"GITHUB"})]})]}),(0,E.tZ)("h2",{css:R,children:n(o||(o=(0,b.Z)(["banner.description"])))}),"zh"===t&&(0,E.BX)("h2",{css:z,children:["基于开源",(0,E.BX)(O(),{target:"_blank",href:"https://mica-labs.github.io/",css:D,children:[" "," Mica"]})," ","构建，支持",(0,E.BX)(O(),{href:"/zh/studio/on-cloud/",css:X,children:[" "," 云端"]})," ","和",(0,E.BX)(O(),{href:"/zh/studio/premises/",css:M,children:[" "," 本地"]})," ","免费使用。"]}),"en"===t&&(0,E.BX)("h2",{css:G,children:["Built on open-source",(0,E.BX)(O(),{target:"_blank",href:"https://mica-labs.github.io/",css:N,children:[" "," Mica"]})," ",", free",(0,E.BX)(O(),{href:"/en/studio/on-cloud/",css:q,children:[" "," on cloud"]})," ","and",(0,E.BX)(O(),{href:"/en/studio/premises/",css:F,children:[" "," on-prem."]})," "]})]})})})}var U=n(5675),$=n.n(U),H={name:"cazv1u",styles:"display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;justify-content:center;padding-top:1.25rem;padding-bottom:1.25rem"},Y={name:"o4ulmz",styles:"margin:0.75rem"};function K(e){var t=e.value;return(0,E.tZ)("section",{children:(0,E.tZ)(I.Z,{css:H,children:(void 0===t?[]:t).map(function(e){return(0,E.tZ)($(),{width:190,height:40,src:"/cases/".concat(e),alt:"".concat(e),css:Y},e.split(".")[0])})})})}var Q={features:[{display:"flex",flexDirection:"column",gap:"1rem",paddingLeft:"1rem",paddingRight:"1rem",textAlign:"center"},{"@media (min-width: 1280px)":{flexDirection:"row",textAlign:"left"}},{name:"xs20ik",styles:"h3{margin-bottom:2rem;text-align:center;--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity)); span{padding-left:0.5rem;padding-right:0.5rem; @media (min-width: 1280px){padding-left:0px;};}}li{padding:1.5rem; @media (min-width: 1280px){width:33.333333%;} border-radius:0.375rem;--tw-shadow:var(--tw-shadow-colored);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:#9ca3af;;}"}]},V={name:"1uppsjk",styles:"display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;justify-content:center;padding-top:2.5rem;padding-bottom:5rem"};function J(){var e=(0,S.Z)();return(0,E.tZ)("section",{children:(0,E.tZ)(I.Z,{css:V,children:(0,E.BX)("ul",{css:[Q.features,"",""],className:"",children:[(0,E.BX)("li",{children:[(0,E.tZ)("h3",{children:(0,E.tZ)("span",{children:e(i||(i=(0,b.Z)(["feature.2.title"])))})}),(0,E.tZ)("div",{children:e(a||(a=(0,b.Z)(["feature.2.description"])))})]}),(0,E.BX)("li",{children:[(0,E.tZ)("h3",{children:(0,E.tZ)("span",{children:e(s||(s=(0,b.Z)(["feature.3.title"])))})}),(0,E.tZ)("div",{children:e(c||(c=(0,b.Z)(["feature.3.description"])))})]}),(0,E.BX)("li",{children:[(0,E.tZ)("h3",{children:(0,E.tZ)("span",{children:e(l||(l=(0,b.Z)(["feature.4.title"])))})}),(0,E.tZ)("div",{children:e(d||(d=(0,b.Z)(["feature.4.description"])))})]})]})})})}var ee=n(7294),et=n(2315),en={Mica:{"agents.yml":'weather_agent:\n  type: llm agent\n  description: Get the current weather in a given location and send email\n  prompt: |-\n    You are a Weather Query Agent. You can do following things:\n    1、Get the current weather in a given location. Location MUST be a city.\n     When a user asks about the weather, extract the location from their question. Once all the information is collected,  call the "get_weather" function\n    2、sending email:\n     When a user sending email, extract the recipient、subject and body from their question. Once all the information is collected,  call the "send_email" function.\n  args:\n  - subject\n  - recipient\n  - location\n  - body\n  uses:\n  - get_weather\n  - send_email\n\nget_weather:\n  type: function\n\nsend_email:\n  type: function\n\nmeta:\n  type: ensemble agent\n  description: You can select an agent to response user\'s question.\n  contains:\n  - weather_agent\n  steps:\n  - bot: Do you want to know the weather? \n  fallback:\n    policy: Lame! We got a glitch, please try again later.\n\nmain:\n  steps:\n  - call: meta\n    schedule: priority\n',"functions.py":'def get_weather(location):\n    print(f"It\'s 25 degrees and sunny in {location} today")\n    return\ndef send_email(recipient, subject, body):\n    print("Sending email...")\n    print(f"To: {recipient}")\n    print(f"Subject: {subject}")\n    print(f"Body: {body}")\n    print(f"The email with the subject {subject} with body {body} has been sent to {recipient}.")\n    return'}},er={Swarm:{"Agents.py":'import json\n\nfrom swarm import Agent\n\n\ndef get_weather(location, time="now"):\n    """Get the current weather in a given location. Location MUST be a city."""\n    return json.dumps({"location": location, "temperature": "65", "time": time})\n\n\ndef send_email(recipient, subject, body):\n    print("Sending email...")\n    print(f"To: {recipient}")\n    print(f"Subject: {subject}")\n    print(f"Body: {body}")\n    return "Sent!"\n\n\nweather_agent = Agent(\n    name="Weather Agent",\n    instructions="You are a helpful agent.",\n    functions=[get_weather, send_email],\n)',"run.py":'from swarm.repl import run_demo_loop\nfrom agents import weather_agent\n\nif __name__ == "__main__":\n    run_demo_loop(weather_agent, stream=True)'},autogen:{"agents.py":'import json\nfrom autogen import AssistantAgent, UserProxyAgent\n\ndef get_weather(location: str, time: str = "now") -> str:\n    """Get the current weather in a given location. Location MUST be a city."""\n    return json.dumps({"location": location, "temperature": "65", "time": time})\n\ndef send_email(recipient: str, subject: str, body: str) -> str:\n    print("Sending email...")\n    print(f"To: {recipient}")\n    print(f"Subject: {subject}")\n    print(f"Body: {body}")\n    return "Sent!"\n\nweather_agent = AssistantAgent(\n    name="Weather Agent",\n    system_message="You are a helpful agent that provides weather updates and sends emails.",\n    function_map={"get_weather": get_weather, "send_email": send_email},\n)\n\nuser = UserProxyAgent(name="User")\n\n# Example interaction\nresponse = user.initiate_chat(weather_agent, message="Get the weather for San Francisco.")\nprint(response)\n\nif __name__ == "__main__":\n    main()\n'},"Multi-Agent Orchestrator":{"main.py":"import asyncio\nimport uuid\nimport sys\nfrom typing import Any, List\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\nfrom multi_agent_orchestrator.classifiers import ClassifierResult\nfrom multi_agent_orchestrator.agents import AgentResponse, Agent, BedrockFlowsAgent, BedrockFlowsAgentOptions\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole\n\nasync def handle_request(_orchestrator: MultiAgentOrchestrator,agent:Agent, _user_input:str, _user_id:str, _session_id:str):\n    classifier_result = ClassifierResult(selected_agent=agent, confidence=1.0)\n    response:AgentResponse = await _orchestrator.agent_process_request(\n        _user_input,\n        _user_id,\n        _session_id,\n        classifier_result)\n\n    print(response.output.content[0].get('text'))\n\n\ndef flow_input_encoder(agent:Agent, input: str, **kwargs) -> Any:\n    global flow_tech_agent\n    if agent == flow_tech_agent:\n        chat_history:List[ConversationMessage] = kwargs.get('chat_history', [])\n\n        chat_history_string = '\\n'.join(f\"{message.role}:{message.content[0].get('text')}\" for message in chat_history)\n\n        return {\n                \"question\": input,\n                \"history\":chat_history_string\n            }\n    else:\n        return input\n\ndef flow_output_decode(agent:Agent, response: Any, **kwargs) -> Any:\n    global flow_tech_agent\n    if agent == flow_tech_agent:\n        return ConversationMessage(\n            role=ParticipantRole.ASSISTANT.value,\n            content=[{'text': response}]\n        )\n    else:\n        return ConversationMessage(\n            role=ParticipantRole.ASSISTANT.value,\n            content=[{'text': response}]\n        )\n\nif __name__ == \"__main__\":\n\n    # Initialize the orchestrator with some options\n    orchestrator = MultiAgentOrchestrator(options=OrchestratorConfig(\n        LOG_AGENT_CHAT=True,\n        LOG_CLASSIFIER_CHAT=True,\n        LOG_CLASSIFIER_RAW_OUTPUT=True,\n        LOG_CLASSIFIER_OUTPUT=True,\n        LOG_EXECUTION_TIMES=True,\n        MAX_RETRIES=3,\n        USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=False,\n        MAX_MESSAGE_PAIRS_PER_AGENT=10\n    ))\n\n    flow_tech_agent = BedrockFlowsAgent(BedrockFlowsAgentOptions(\n        name=\"tech-agent\",\n        description=\"Specializes in handling tech questions about AWS services\",\n        flowIdentifier='BEDROCK-FLOW-ID',\n        flowAliasIdentifier='BEDROCK-FLOW-ALIAS-ID',\n        enableTrace=False,\n        flow_input_encoder=flow_input_encoder,\n        flow_output_decoder=flow_output_decode\n    ))\n    orchestrator.add_agent(flow_tech_agent)\n\n    USER_ID = \"user123\"\n    SESSION_ID = str(uuid.uuid4())\n\n    print(\"Welcome to the interactive Multi-Agent system. Type 'quit' to exit.\")\n\n    while True:\n        # Get user input\n        user_input = input(\"\\nYou: \").strip()\n\n        if user_input.lower() == 'quit':\n            print(\"Exiting the program. Goodbye!\")\n            sys.exit()\n\n        # Run the async function\n        asyncio.run(handle_request(orchestrator, flow_tech_agent, user_input, USER_ID, SESSION_ID))","main.ts":'import readline from "readline";\nimport {\n  MultiAgentOrchestrator,\n  Logger,\n  BedrockFlowsAgent,\n  Agent,\n} from "multi-agent-orchestrator";\n\n\nconst flowInputEncoder = (\n    agent: Agent,\n    input: string,\n    kwargs: {\n        userId?: string,\n        sessionId?: string,\n        chatHistory?: any[],\n        [key: string]: any  // This allows any additional properties\n      }\n) => {\n    const chat_history_string = kwargs.chatHistory?.map((message: { role: string; content: { text?: string }[] }) =>\n      `${message.role}:${message.content[0]?.text || \'\'}`\n    )\n    .join(\'\\n\');\n\n    if (agent == flowTechAgent){\n        return {\n        "question":input,\n        "history":chat_history_string\n        };\n    } else {\n        return input\n    }\n}\n\nconst flowTechAgent = new BedrockFlowsAgent({\n    name: "Tech Agent",\n    description:\n      "Specializes in technology areas including software development, hardware, AI, cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs related to technology products and services.",\n    flowIdentifier:\'BEDROCK-FLOW-ID\',\n    flowAliasIdentifier:\'BEDROCK-FLOW-ALIAS-ID\',\n    flowInputEncoder: flowInputEncoder\n  });\n\nfunction createOrchestrator(): MultiAgentOrchestrator {\n  const orchestrator = new MultiAgentOrchestrator({\n    config: {\n      LOG_AGENT_CHAT: true,\n      LOG_EXECUTION_TIMES: true,\n      MAX_MESSAGE_PAIRS_PER_AGENT: 10,\n    },\n    logger: console,\n  });\n\n  // Add a Tech Agent to the orchestrator\n  orchestrator.addAgent(\n    flowTechAgent\n  );\n\n  return orchestrator;\n}\n\nconst uuidv4 = () => {\n  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == "x" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\n// Function to run local conversation\nasync function runLocalConversation(): Promise<void> {\n  const orchestrator = createOrchestrator();\n  // Generate random uuid 4\n\n  const userId = uuidv4();\n  const sessionId = uuidv4();\n\n  const allAgents = orchestrator.getAllAgents();\n  Logger.logger.log("Here are the existing agents:");\n  for (const agentKey in allAgents) {\n    const agent = allAgents[agentKey];\n    Logger.logger.log(`Name: ${agent.name}`);\n    Logger.logger.log(`Description: ${agent.description}`);\n    Logger.logger.log("--------------------");\n  }\n\n  orchestrator.analyzeAgentOverlap();\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  Logger.logger.log(\n    "Welcome to the interactive AI agent. Type your queries and press Enter. Type \'exit\' to end the conversation."\n  );\n\n  const askQuestion = (): void => {\n    rl.question("You: ", async (userInput: string) => {\n      if (userInput.toLowerCase() === "exit") {\n        Logger.logger.log("Thank you for using the AI agent. Goodbye!");\n        rl.close();\n        return;\n      }\n\n      try {\n\n        const response = await orchestrator.agentProcessRequest(\n            userInput,\n            userId,\n            sessionId,\n            {\n                selectedAgent:flowTechAgent,\n                confidence:1.0\n            }\n        );\n\n        // Handle non-streaming response (AgentProcessingResult)\n        Logger.logger.log("\\n** RESPONSE ** \\n");\n        Logger.logger.log(`> Agent ID: ${response.metadata.agentId}`);\n        Logger.logger.log(`> Agent Name: ${response.metadata.agentName}`);\n        Logger.logger.log(`> User Input: ${response.metadata.userInput}`);\n        Logger.logger.log(`> User ID: ${response.metadata.userId}`);\n        Logger.logger.log(`> Session ID: ${response.metadata.sessionId}`);\n        Logger.logger.log(\n        `> Additional Parameters:`,\n        response.metadata.additionalParams\n        );\n        Logger.logger.log(`\\n> Response: ${response.output}`);\n      } catch (error) {\n        Logger.logger.error("Error:", error);\n      }\n      askQuestion(); // Continue the conversation\n    });\n  };\n\n  askQuestion(); // Start the conversation\n}\n\n// Check if this script is being run directly (not imported as a module)\nif (require.main === module) {\n  // This block will only run when the script is executed locally\n  runLocalConversation();\n}'}};function eo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ei(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?eo(Object(n),!0).forEach(function(t){(0,f.Z)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):eo(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var ea={name:"sivmlp",styles:"display:flex;height:550px;width:100%;max-width:56rem;flex-direction:column;overflow:hidden;border-radius:0.5rem;border-width:1px;--tw-border-opacity:1;border-color:rgb(225 228 232 / var(--tw-border-opacity));background-color:rgb(255 255 255 / 0.8);--tw-shadow:0 4px 20px -2px rgba(66,153,225,0.18),0 0 15px -3px rgba(66,153,225,0.2);--tw-shadow-colored:0 4px 20px -2px var(--tw-shadow-color), 0 0 15px -3px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-backdrop-blur:blur(4px);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)"},es={name:"9dm6og",styles:"display:flex;align-items:center;gap:0.5rem;border-bottom-width:1px;--tw-border-opacity:1;border-color:rgb(225 228 232 / var(--tw-border-opacity));background-color:rgb(249 250 251 / 0.5);padding:0.75rem;--tw-backdrop-blur:blur(4px);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)"},ec={name:"9wfh80",styles:"display:flex;flex:1 1 0%;flex-direction:column"},el={name:"1o61nnh",styles:"display:flex;align-items:center;justify-content:space-between;border-bottom-width:1px;--tw-border-opacity:1;border-color:rgb(225 228 232 / var(--tw-border-opacity));background-color:rgb(249 250 251 / 0.5);padding:0.5rem;--tw-backdrop-blur:blur(4px);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)"},ed={name:"34i93t",styles:"display:flex;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));}"},ep={name:"1rit7by",styles:"border-radius:0.375rem;border-width:1px;--tw-border-opacity:1;border-color:rgb(229 231 235 / var(--tw-border-opacity));padding-left:0.625rem;padding-right:0.625rem;padding-top:0.25rem;padding-bottom:0.25rem;font-size:0.75rem;line-height:1rem;--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity));transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:200ms;:hover{--tw-border-opacity:1;border-color:rgb(209 213 219 / var(--tw-border-opacity));--tw-bg-opacity:1;background-color:rgb(249 250 251 / var(--tw-bg-opacity));}"},eg={name:"l6ygg2",styles:"position:relative;max-height:500px;flex:1 1 0%;overflow-y:auto;--tw-bg-opacity:1;background-color:rgb(246 248 250 / var(--tw-bg-opacity));padding:1rem;font-size:0.875rem;line-height:1.25rem"},eu={name:"1cpu0ni",styles:"overflow-x:auto;overflow-wrap:break-word"};function eh(e){var t=e.filesData,n=Object.keys(t),r=(0,ee.useState)(n[0]),o=r[0],i=r[1],a=(0,ee.useState)(Object.keys(t[o])[0]),s=a[0],c=a[1],l=(0,ee.useState)("Copy"),d=l[0],p=l[1];return(0,E.BX)("div",{css:ea,children:[(0,E.tZ)("div",{css:es,children:n.map(function(e,n){return(0,E.tZ)("button",{css:["display:block;border-radius:0.5rem;padding-left:1rem;padding-right:1rem;padding-top:0.625rem;padding-bottom:0.625rem;text-align:left;font-size:1rem;line-height:1.5rem;font-weight:500;transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:200ms;",o===e?{backgroundImage:"linear-gradient(to right, var(--tw-gradient-stops))","--tw-gradient-from":"#3b82f6 var(--tw-gradient-from-position)","--tw-gradient-to":"#2563eb var(--tw-gradient-to-position)","--tw-gradient-stops":"var(--tw-gradient-from), var(--tw-gradient-to)","--tw-text-opacity":"1",color:"rgb(255 255 255 / var(--tw-text-opacity))","--tw-shadow":"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)","--tw-shadow-colored":"0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color)",boxShadow:"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)"}:{":hover":{"--tw-bg-opacity":"1",backgroundColor:"rgb(239 246 255 / var(--tw-bg-opacity))","--tw-shadow":"0 1px 2px 0 rgb(0 0 0 / 0.05)","--tw-shadow-colored":"0 1px 2px 0 var(--tw-shadow-color)",boxShadow:"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)"}},"",""],onClick:function(){i(e),c(Object.keys(t[e])[0]),p("Copy")},children:e},n)})}),(0,E.BX)("div",{css:ec,children:[(0,E.BX)("div",{css:el,children:[(0,E.tZ)("div",{css:ed,children:Object.keys(t[o]).map(function(e,t){return(0,E.tZ)("button",{css:["display:block;border-radius:0.5rem;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.5rem;padding-bottom:0.5rem;text-align:left;font-size:0.875rem;line-height:1.25rem;transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:200ms;",s===e?{backgroundImage:"linear-gradient(to right, var(--tw-gradient-stops))","--tw-gradient-from":"#3b82f6 var(--tw-gradient-from-position)","--tw-gradient-to":"#2563eb var(--tw-gradient-to-position)","--tw-gradient-stops":"var(--tw-gradient-from), var(--tw-gradient-to)","--tw-text-opacity":"1",color:"rgb(255 255 255 / var(--tw-text-opacity))","--tw-shadow":"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)","--tw-shadow-colored":"0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color)",boxShadow:"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)"}:{":hover":{"--tw-bg-opacity":"1",backgroundColor:"rgb(239 246 255 / var(--tw-bg-opacity))","--tw-shadow":"0 1px 2px 0 rgb(0 0 0 / 0.05)","--tw-shadow-colored":"0 1px 2px 0 var(--tw-shadow-color)",boxShadow:"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)"}},"",""],onClick:function(){c(e),p("Copy")},children:e},t)})}),(0,E.tZ)("button",{css:ep,onClick:function(){navigator.clipboard.writeText(t[o][s]).then(function(){return p("Copied!")}).catch(function(e){return console.error("复制失败：",e)})},children:d})]}),(0,E.tZ)("div",{css:eg,children:(0,E.tZ)(et.y$,{theme:et.np.github,code:t[o][s],language:s.endsWith(".js")?"javascript":s.endsWith(".ts")?"typescript":s.endsWith(".yml")?"yaml":s.endsWith(".py")?"python":s.endsWith(".css")?"css":s.endsWith(".scss")?"scss":"plaintext",children:function(e){var t=e.className,n=e.style,r=e.tokens,o=e.getLineProps,i=e.getTokenProps;return(0,E.tZ)("pre",{css:eu,className:t,style:ei(ei({},n),{},{ineHeight:"1.5",paddingBottom:"30px"}),children:r.map(function(e,t){return(0,E.tZ)("div",ei(ei({},o({line:e,key:t})),{},{children:e.map(function(e,t){return(0,E.tZ)("span",ei({},i({token:e,key:t})),t)})}),t)})})}})})]})]})}var em={name:"1x6cizd",styles:"margin-top:-4.5rem;background-size:cover;background-repeat:no-repeat;padding-top:4.5rem"},ew={name:"1ik4q9r",styles:"display:flex;flex-direction:row;align-items:center;gap:2.5rem;padding:1.25rem;padding-bottom:2.5rem"};function ef(){return(0,E.tZ)("section",{css:em,children:(0,E.BX)(I.Z,{css:ew,children:[(0,E.tZ)(eh,{filesData:en}),(0,E.tZ)(eh,{filesData:er})]})})}var eb=n(990),ey={name:"1w8ioge",styles:"position:relative;display:flex;align-items:center;justify-content:center;overflow:visible"},ev={name:"a4hmbt",styles:"position:absolute"},ex=function(e){var t=e.layers,n=(0,ee.useRef)(null),r=(0,ee.useRef)([]);return(0,ee.useEffect)(function(){var e=n.current,o=r.current;o.forEach(function(e,t){eb.ZP.set(e,{z:20*t,transformPerspective:2e3})});var i=0,a=0,s=0,c=0,l=function(t){var n=e.getBoundingClientRect();i=t.clientX-n.left-n.width/2,a=t.clientY-n.top-n.height/2};return e.addEventListener("mousemove",l),function e(){s+=(i-s)*.1,c+=(a-c)*.1,o.forEach(function(e,n){var r=(t.length-n)*.1;eb.ZP.set(e,{x:s*r*.02,y:c*r*.02,rotationY:s*r*.01,rotationX:-c*r*.01})}),requestAnimationFrame(e)}(),function(){e.removeEventListener("mousemove",l)}},[t]),(0,E.tZ)("div",{ref:n,css:ey,style:{perspective:"1000px",transformStyle:"preserve-3d",height:"100%",width:"100%",filter:"drop-shadow(0 15px 30px rgba(0, 0, 0, 0.15))"},children:t.map(function(e,n){var o,i,a,s;return(0,E.tZ)("img",{ref:function(e){return r.current[n]=e},src:e.src,css:ev,alt:"Layer ".concat(n+1),style:{zIndex:t.length-n,transformStyle:"preserve-3d",border:!1!==e.border?"0.5px solid rgba(0, 0, 0, 0.03)":"none",borderRadius:"8px",imageRendering:"auto",willChange:"transform",backfaceVisibility:"hidden",top:(null===(o=e.position)||void 0===o?void 0:o.top)||"auto",bottom:(null===(i=e.position)||void 0===i?void 0:i.bottom)||"auto",left:(null===(a=e.position)||void 0===a?void 0:a.left)||"auto",right:(null===(s=e.position)||void 0===s?void 0:s.right)||"auto"}},n)})})},e_=[{src:"/images/t2.png",border:!1,position:{right:"20px"}},{src:"/images/t3.png",border:!0}],ek={name:"xuvoy3",styles:"margin-top:-4.5rem;background-size:cover;background-repeat:no-repeat;padding-bottom:2rem;background-position-y:bottom;margin-left:-1px"},eA={name:"1wpbuna",styles:"display:flex;flex-direction:column;padding-bottom:2.5rem;padding-top:2.5rem;text-align:center;font-size:1.125rem;line-height:1.75rem"},eZ={name:"bk4wzr",styles:"margin-bottom:2rem;display:flex;height:100vh;flex-direction:column"},eO={name:"18sovcn",styles:"white-space:pre-wrap;font-size:2.25rem;line-height:1.375;font-weight:500"},eI={name:"1nql5pk",styles:"position:relative;margin-top:4rem;flex:1 1 0%"};function eS(e){e.appOrigin,e.locale;var t=(0,S.Z)();return(0,E.tZ)("section",{css:ek,children:(0,E.tZ)(I.Z,{css:eA,children:(0,E.BX)("div",{css:eZ,children:[(0,E.BX)("div",{css:eO,children:[(0,E.tZ)("p",{children:t(p||(p=(0,b.Z)(["float.layer.1.title"])))}),(0,E.tZ)("p",{children:t(g||(g=(0,b.Z)(["float.layer.2.title"])))})]}),(0,E.tZ)("div",{css:eI,children:(0,E.tZ)(ex,{layers:e_})})]})})})}var eE=["cases","examples"];function ej(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function eT(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ej(Object(n),!0).forEach(function(t){(0,f.Z)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ej(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function eL(e){var t=e.cases,n=(e.examples,(0,y.Z)(e,eE)),r=(0,S.Z)();return(0,E.BX)(E.HY,{children:[(0,E.BX)(x(),{children:[(0,E.tZ)("title",{children:r(u||(u=(0,b.Z)(["title"])))}),(0,E.tZ)("meta",{name:"description",content:r(h||(h=(0,b.Z)(["banner.title"])))+"\n"+r(m||(m=(0,b.Z)(["banner.description"])))+"\n"+r(w||(w=(0,b.Z)(["banner.description.extends"])))}),(0,E.tZ)("link",{rel:"icon",href:"/favicon.ico"})]}),(0,E.tZ)(k.Z,eT({},n)),(0,E.BX)(_.Z,{children:[(0,E.tZ)(W,eT({},n)),(0,E.tZ)(ef,{}),"normal"===n.deployType&&(0,E.tZ)(K,{value:t}),(0,E.tZ)(J,{}),(0,E.tZ)(eS,{})]}),(0,E.tZ)(A.Z,eT({},n))]})}}}]);